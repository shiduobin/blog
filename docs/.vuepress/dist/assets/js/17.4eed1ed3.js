(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{585:function(t,a,s){"use strict";s.r(a);var r=s(6),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),s("p",[t._v("链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 相比于线性表顺序结构，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到 O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要 O(n)的时间，而线性表和顺序表相应的时间复杂度分别是 O(logn)和 O(1)。")]),t._v(" "),s("h2",{attrs:{id:"单链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单链表"}},[t._v("#")]),t._v(" 单链表")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/Singly_linked_lis.png"),alt:"单链表"}}),t._v(" "),s("p",[t._v("单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成：元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。")]),t._v(" "),s("h4",{attrs:{id:"单链表的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单链表的特点"}},[t._v("#")]),t._v(" 单链表的特点：")]),t._v(" "),s("ul",[s("li",[t._v("用一组任意的内存空间去存储数据元素（这里的内存空间可以是连续的，也可以是不连续的）")]),t._v(" "),s("li",[t._v("每个节点(node)都由数据本身和一个指向后续节点的指针组成")]),t._v(" "),s("li",[t._v("整个链表的存取必须从头指针开始，头指针指向第一个节点")]),t._v(" "),s("li",[t._v("最后一个节点的指针指向空（NULL）")])]),t._v(" "),s("h2",{attrs:{id:"双链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双链表"}},[t._v("#")]),t._v(" 双链表")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/Two_way_linked_list.png"),alt:"双链表"}}),t._v(" "),s("p",[t._v("双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。")]),t._v(" "),s("h2",{attrs:{id:"循环链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环链表"}},[t._v("#")]),t._v(" 循环链表")]),t._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190531213336275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zmb3J0dW5hdGVveQ==,size_16,color_FFFFFF,t_70#pic_center",alt:"循环链表"}}),t._v(" "),s("p",[t._v("循环链表是另一种形式的链式存储结构。它的特点是表中最后一个结点的指针域指向头结点，整个链表形成一个环。")]),t._v(" "),s("h2",{attrs:{id:"哑节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哑节点"}},[t._v("#")]),t._v(" 哑节点")]),t._v(" "),s("h2",{attrs:{id:"栈-堆栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈-堆栈"}},[t._v("#")]),t._v(" 栈(堆栈)")]),t._v(" "),s("p",[t._v("栈又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。")]),t._v(" "),s("h4",{attrs:{id:"堆栈的特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆栈的特性"}},[t._v("#")]),t._v(" 堆栈的特性：")]),t._v(" "),s("ul",[s("li",[t._v("最后一个放入堆栈中的物体总是被最先拿出来， 这个特性通常称为"),s("strong",[t._v("后进先出")]),t._v("(LIFO)队列。")]),t._v(" "),s("li",[t._v("向一个栈插入新元素叫入栈（进栈）(PUSH)，就是把新元素放入到栈顶的上面，成为新的栈顶；")]),t._v(" "),s("li",[t._v("从一个栈删除元素叫出栈(POP)，就是把栈顶的元素删除掉，相邻的成为新栈顶；")])]),t._v(" "),s("h2",{attrs:{id:"队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")])])}),[],!1,null,null,null);a.default=_.exports}}]);